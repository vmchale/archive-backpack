signature Archive ( Entry
                  , packToFile
                  , unpackFromFile
                  , unpackToDir
                  , unpackFileToDir
                  , readArchiveBytes
                  , packFromFiles
                  ) where

import qualified Data.ByteString.Lazy as BSL

data Entry

-- mkEntry :: FilePath -> IO Entry

packFromFiles :: FilePath -- ^ Path of @.tar@ file to write
              -> [FilePath] -- ^ Files and directories to archive
              -> IO ()

-- TODO: use Tar.pack or something and then BS.writeFile tar . Tar.write =<< Tar.pack base paths in the high-level?
-- can you do generic implementations??
-- that would be what's useful basically

packToFile :: FilePath -> [Entry] -> IO ()

unpackFromFile :: FilePath -> IO [Entry]

unpackToDir :: FilePath -> BSL.ByteString -> IO ()

unpackFileToDir :: FilePath -- ^ Filepath pointing to archive
                -> FilePath -- ^ Directory to unpack in
                -> IO ()

readArchiveBytes :: BSL.ByteString -> [Entry]
