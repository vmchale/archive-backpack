module Archive.FFI ( Entry
                   , Error
                   , readArchiveBytes
                   , unpackToDir
                   , writeArchiveBytes
                   , packFiles
                   , versionInfo
                   ) where

import qualified Codec.Archive                 as FFI
import           Codec.Archive.Foreign.Archive (archiveVersionString)
import           Control.Composition           ((.*))
import           Control.Exception             (throw)
import qualified Data.ByteString.Lazy          as BSL
import qualified Data.Version                  as V
import qualified Paths_archive_libarchive      as P

type Entry = FFI.Entry

type Error = FFI.ArchiveResult

writeArchiveBytes :: [Entry] -> BSL.ByteString
writeArchiveBytes = FFI.entriesToBSL

readArchiveBytes :: BSL.ByteString -> Either Error [Entry]
readArchiveBytes = FFI.readArchiveBSL

unpackToDir :: FilePath -> BSL.ByteString -> IO ()
unpackToDir = fmap (either throw id) .* FFI.runArchiveM .* FFI.unpackToDirLazy

packFiles :: [FilePath] -> IO BSL.ByteString
packFiles = FFI.packFiles

-- | @since 0.2.2.0
versionInfo :: String
versionInfo =
       "libarchive-hs: " ++ VERSION_libarchive ++ "\n"
    ++ archiveVersionString ++ "\n"
    ++ "archive-libarchive: " ++ V.showVersion P.version
